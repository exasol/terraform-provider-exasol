name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  GO_VERSION: '1.25'

jobs:
  test:
    name: Test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Set up Go
        uses: actions/setup-go@v6
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Cache Go modules
        uses: actions/cache@v4
        with:
          path: ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Download dependencies
        run: go mod download

      - name: Run fmt
        run: make fmt

      - name: Run vet
        run: make vet

      - name: Run tests
        run: make test

      - name: Build
        run: make build

      - name: Upload coverage reports
        uses: codecov/codecov-action@v5
        if: matrix.os == 'ubuntu-latest'

  lint:
    name: Lint
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v5
      - uses: actions/setup-go@v6
        with:
          go-version: ${{ env.GO_VERSION }}
      - name: golangci-lint
        uses: golangci/golangci-lint-action@v8
        with:
          version: latest
  release:
    name: Build & Publish provider binary
    needs: [test, lint]        # only after tests/lint succeed
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'   # only when merging/pushing to main
    permissions:
      contents: write          # needed to create GitHub Releases
    steps:
      - uses: actions/checkout@v5
        with:
          fetch-depth: 0       # goreleaser needs tags and full history
      - uses: actions/setup-go@v6
        with:
          go-version: ${{ env.GO_VERSION }}
      
      - name: Extract version from main.go and tag
        id: tag
        run: |
          set -e
          # grep the quoted value of var version = "x.y.z"
          ver=$(grep -Po 'var version\s*=\s*"\K[0-9]+\.[0-9]+\.[0-9]+' main.go)
          echo "Version from main.go: $ver"

          git fetch --tags

          if git rev-parse "v$ver" >/dev/null 2>&1; then
            echo "Tag v$ver already exists â€“ will reuse"
          else
            echo "Creating tag v$ver"
            git config user.name  "github-actions"
            git config user.email "github-actions@github.com"
            git tag -f "v$ver"
            git push origin "v$ver"
          fi
          echo "tag=v$ver" >> $GITHUB_OUTPUT

      # Install goreleaser
      - name: Install goreleaser
        uses: goreleaser/goreleaser-action@v6
        with:
          version: latest
          args: release --clean
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}