name: CI

on:
  push:
    branches: [ main, develop ]
    tags-ignore:
      - 'v*'
  pull_request:
    branches: [ main ]

env:
  GO_VERSION: '1.25'

jobs:
  test:
    name: Test
    runs-on: ubuntu-latest
    # Only run on pushes and PRs from the same repository (not forks)
    if: |
      github.event_name == 'push' ||
      (github.event_name == 'pull_request' && github.event.pull_request.head.repo.full_name == github.repository)
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Set up Go
        uses: actions/setup-go@v6
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Cache Go modules
        uses: actions/cache@v4
        with:
          path: ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Download dependencies
        run: go mod download

      - name: Run fmt
        run: make fmt

      - name: Run vet
        run: make vet

      - name: Run tests
        run: make test

      - name: Build
        run: make build

      - name: Upload coverage reports
        uses: codecov/codecov-action@v5
        if: success()

  lint:
    name: Lint
    runs-on: ubuntu-latest
    # Only run on pushes and PRs from the same repository (not forks)
    if: |
      github.event_name == 'push' ||
      (github.event_name == 'pull_request' && github.event.pull_request.head.repo.full_name == github.repository)
    steps:
      - uses: actions/checkout@v5
      - uses: actions/setup-go@v6
        with:
          go-version: ${{ env.GO_VERSION }}
      - name: golangci-lint
        uses: golangci/golangci-lint-action@v8
        with:
          version: latest

  build-and-release:
    name: Build & Release
    needs: [test, lint]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@v5
        with:
          fetch-depth: 0

      - uses: actions/setup-go@v6
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Extract version and create/update tag
        run: |
          ver=$(grep -Po 'var version\s*=\s*"\K[0-9]+\.[0-9]+\.[0-9]+' main.go)
          echo "Building version: $ver"
          git config user.name "github-actions"
          git config user.email "github-actions@github.com"
          git tag -f "v$ver" -m "Release v$ver"
          git push -f origin "v$ver"

      - name: Run goreleaser
        uses: goreleaser/goreleaser-action@v6
        with:
          version: latest
          args: release --clean
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
